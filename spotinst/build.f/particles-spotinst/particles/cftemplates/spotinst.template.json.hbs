{{#layout}}

  {{
     parameter "m:core" "base"
     logicalId="LambdaInvokeRoleArn"
     type="String"
     description="ARN of IAM role that can invoke lambda functions"
  }}

  {{
    parameter "m:core" "base"
    logicalId="RestApiId"
    type="String"
    description="API Id"
  }}

  {{
    parameter "m:core" "base"
    logicalId="ParentResourceId"
    type="String"
    description="Parent Resource Id"
  }}

  {{
     parameter "m:core" "base"
     logicalId="EC2GetLambdaArn"
     type="String"
     description="ARN of lambda function for get method of ec2 resource"
  }}

  {{
     parameter "m:core" "base"
     logicalId="CloudformationPostLambdaArn"
     type="String"
     description="ARN of lambda function for post method of cloudformation resource"
  }}

  {{
     parameter "m:core" "base"
     logicalId="SpotinstPostLambdaArn"
     type="String"
     description="ARN of lambda function for post method of spotinst resource"
  }}

  {{ set 'm:api-gateway' 'resource'
  }}

  {{#resource logicalId="Cloudformation"}}
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ParentId": { "Ref": "ParentResourceId" },
      "PathPart": "cloudformation"
    }
  {{/resource}}

  {{#resource logicalId="CloudformationPost"}}
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ResourceId": { "Ref": "Cloudformation" },
      "HttpMethod": "POST",
      "AuthorizationType": "NONE",
      "Integration": {
        "Credentials": { "Ref": "LambdaInvokeRoleArn" },
        "IntegrationHttpMethod": "POST",
        "Type": "AWS",
        "Uri": {"Fn::Join": ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Ref": "CloudformationPostLambdaArn" }, "/invocations"]]},
        "RequestTemplates": {
          "application/json": "{\n  \"federateRoleArn\": \"$input.path('$').federateRoleArn\",\n  \"accountRoleArn\": \"$input.path('$').accountRoleArn\",\n  \"externalId\": \"$input.path('$').externalId\",\n  \"region\": \"$input.path('$').region\",\n  \"account\": \"$input.path('$').account\",\n  \"dryRun\": $input.path('$').dryRun,\n  \"instanceId\": \"$input.path('$').instanceId\",\n  \"name\": \"$input.path('$').name\",\n  \"description\": \"$input.path('$').description\",\n  \"tags\": \"$input.path('$').tags\",\n  \"keyPairName\": \"$input.path('$').keyPairName\",\n  \"spotinstAccessKey\": \"$input.path('$').spotinstAccessKey\"\n}\n"
        },
        {{{ set 'm:api-gateway' 'integration_responses' }}}
      },
      {{{ set 'm:api-gateway' 'method_responses' }}}
    }
  {{/resource}}

  {{#resource logicalId="CloudformationOptions"}}
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ResourceId": { "Ref": "Cloudformation" },
      "HttpMethod": "OPTIONS",
      "AuthorizationType": "NONE",
      "Integration": {
        "Type": "MOCK",
        "RequestTemplates": {"application/json": "{\"statusCode\": 200}" },
        {{{ set 'm:api-gateway' 'integration_responses'
          allowedMethods="'POST,OPTIONS'"
          allowedHeaders="'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,external-id'"
        }}}
      },
      {{{ set 'm:api-gateway' 'method_responses'
        allowedMethods="'POST,OPTIONS'"
        allowedHeaders="'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,external-id'"
      }}}
    }
  {{/resource}}



  {{#resource logicalId="Spotinst"}}
    "Type" : "AWS::ApiGateway::Resource",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ParentId": { "Ref": "ParentResourceId" },
      "PathPart": "spotinst"
    }
  {{/resource}}

  {{#resource logicalId="SpotinstPost"}}
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ResourceId": { "Ref": "Spotinst" },
      "HttpMethod": "POST",
      "AuthorizationType": "NONE",
      "Integration": {
        "Credentials": { "Ref": "LambdaInvokeRoleArn" },
        "IntegrationHttpMethod": "POST",
        "Type": "AWS",
        "Uri": {"Fn::Join": ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Ref": "SpotinstPostLambdaArn" }, "/invocations"]]},
        "RequestTemplates": {
          "application/json": "{\n  \"federateRoleArn\": \"$input.path('$').federateRoleArn\",\n  \"accountRoleArn\": \"$input.path('$').accountRoleArn\",\n  \"externalId\": \"$input.path('$').externalId\",\n  \"region\": \"$input.path('$').region\",\n  \"account\": \"$input.path('$').account\",\n  \"dryRun\": $input.path('$').dryRun,\n  \"instanceId\": \"$input.path('$').instanceId\",\n  \"name\": \"$input.path('$').name\",\n  \"description\": \"$input.path('$').description\",\n  \"tags\": \"$input.path('$').tags\",\n  \"keyPairName\": \"$input.path('$').keyPairName\",\n  \"spotinstAccessKey\": \"$input.path('$').spotinstAccessKey\"\n}\n"
        },
        {{{ set 'm:api-gateway' 'integration_responses' }}}
      },
      {{{ set 'm:api-gateway' 'method_responses' }}}
    }
  {{/resource}}

  {{#resource logicalId="SpotinstOptions"}}
    "Type" : "AWS::ApiGateway::Method",
    "Properties" : {
      "RestApiId": { "Ref": "RestApiId" },
      "ResourceId": { "Ref": "Spotinst" },
      "HttpMethod": "OPTIONS",
      "AuthorizationType": "NONE",
      "Integration": {
        "Type": "MOCK",
        "RequestTemplates": {"application/json": "{\"statusCode\": 200}" },
        {{{ set 'm:api-gateway' 'integration_responses'
          allowedMethods="'POST,OPTIONS'"
          allowedHeaders="'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,external-id'"
        }}}
      },
      {{{ set 'm:api-gateway' 'method_responses'
        allowedMethods="'POST,OPTIONS'"
        allowedHeaders="'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,external-id'"
      }}}
    }
  {{/resource}}

{{/layout}}

---
resourceId: "AWSConfig"
resourcePath: "awsconfig"
methods:
  -
    resourceId: "AWSConfig"
    method: "GET"
    authType: "NONE"
    requestParameters: {
      "method.request.header.roleExternalId":true,
      "method.request.querystring.federateAccount":true,
      "method.request.querystring.federateRoleName":true,
      "method.request.querystring.account":true,
      "method.request.querystring.roleName":true,
      "method.request.querystring.region":true
    }
    lambdaArn: "GetLambdaArn"
    requestTemplates: {
      "application/json": "{\n  \"account\": \"$input.params('account')\",\n  \"region\": \"$input.params('region')\",\n  \"federateAccount\": \"$input.params('federateAccount')\",\n  \"federateRoleName\": \"$input.params('federateRoleName')\",\n  \"roleName\": \"$input.params('roleName')\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\n}\n"
    }
  -
    resourceId: "AWSConfig"
    method: "POST"
    authType: "NONE"
    requestParameters: {"method.request.header.roleExternalId":true}
    lambdaArn: "PostLambdaArn"
    requestTemplates: {
      "application/json": "{\n  \"account\": \"$input.path('$').account\",\n  \"region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\",\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\n}\n"
    }
  -
    resourceId: "AWSConfig"
    method: "DELETE"
    authType: "NONE"
    requestParameters: {"method.request.header.roleExternalId":true}
    lambdaArn: "DeleteLambdaArn"
    requestTemplates: {
      "application/json": "{\n  \"account\": \"$input.path('$').account\",\n  \"region\": \"$input.path('$').region\",\n  \"federateAccount\": \"$input.path('$').federateAccount\",\n  \"federateRoleName\": \"$input.path('$').federateRoleName\",\n  \"roleName\": \"$input.path('$').roleName\",\n  \"roleExternalId\": \"$input.params().header.get('roleExternalId')\"\n}\n"
    }
allowedMethods: "'GET,POST,DELETE,OPTIONS'"
allowedHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,roleExternalId'"
---

{{#layout}}

  {{
    parameter "m:core" "base"
    logicalId="RestApiId"
    type="String"
    description="API Id"
  }}

  {{
    parameter "m:core" "base"
    logicalId="ParentResourceId"
    type="String"
    description="Parent Resource Id"
  }}

  {{
     parameter "m:core" "base"
     logicalId="PostLambdaArn"
     type="String"
     description="ARN of lambda function for post method"
  }}

  {{
     parameter "m:core" "base"
     logicalId="GetLambdaArn"
     type="String"
     description="ARN of lambda function for get method"
  }}

  {{
     parameter "m:core" "base"
     logicalId="DeleteLambdaArn"
     type="String"
     description="ARN of lambda function for delete method"
  }}

  {{
     parameter "m:core" "base"
     logicalId="InvokeFunctionRoleArn"
     type="String"
     description="ARN of IAM role that can invoke lambda functions"
  }}

  {{
    set "m:api-gateway" "resource"
    restApiId="RestApiId"
    parentResourceId="ParentResourceId"
    resourceId=resourceId
    resourcePath=resourcePath
    methods=methods
    allowedHeaders=allowedHeaders
  }}

{{/layout}}
